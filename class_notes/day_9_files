
Files
Bitwise operators

Files:
  Opening and Closing Files
  The file Object Attributes
  File Read
  File Write
  With Statement
  DIR in python 
  Renaming and Deleting Files
  r/w json
  r/w xml
csv reader
  File Positions




File Object Methods: The file object provides functions to manipulate files.
OS Object Methods: This provides methods to process files as well as directories.


Opening and Closing Files
  Python provides basic functions and methods necessary to manipulate files by default.
  You can do most of the file manipulation using a file object.

  The open Function
  Before you can read or write a file, you have to open it using Python's built-in open() function. 
  This function creates a file object, which would be utilized to call other support methods associated with it.

  The close() Method
  The close() method of a file object flushes any unwritten information and closes the file object, 
  after which no more writing can be done.

The file Object Attributes

file.closed : Returns true if file is closed, false otherwise.
file.mode : Returns access mode with which file was opened.	
file.name : Returns name of the file.
file.softspace : Returns false if space explicitly required with print, true otherwise.

Lets looks at this for file mode operation:
  https://www.tutorialspoint.com/python/python_files_io.htm
  
Syntax :
  file object = open(file_name [, access_mode][, buffering])

Terminal EX: 
# Open a file
fo = open("foo.txt", "wb")
print (Name of the file : ", fo.name)
# Close opend file
fo.close()

The read() Method
  -The read() method reads a string from an open file. 
  -It is important to note that Python strings can have binary data. apart from text data.
  - number of ways to read a text file 
  - read()
  - read(count)
  - readline()
  - readline(4)
  - readlines()
  
 Terminal EX:
 # Open a file
  fo = open("foo.txt", "r+")
  str = fo.read(10);
  print ("Read String is : ", str)
  Difference between 
  fo.read(10) and fo.read()???
  
  Explore all above read function ---- do it in class

Looping over a file :
   more memory efficient, and fast manner, you can use the loop over method.

Terminal EX:
fo = open("foo.txt", "r")
for line in fo: 
  print (line) 

File Write :

This method is used to add information or content to an existing file. 
To start a new line after you write data to the file, you can add an EOL character.
  fo.write(“This is a test”) 
  fo.write(“To add more lines.”)
  fo.close()

With Statement:
  It is designed to provide much cleaner syntax and exceptions handling when you are working with code. 
  That explains why it’s good practice to use the with statement where applicable. 
  
  Syntax : 
  with open(“testfile.txt”) as fo:  
    data = fo.read() 
    do something with data 
    
    You can do otehr things with this:
    
   Terminal EX:
   with open(“testfile.txt”) as f: 
    for line in f: 
    print (line)
    
    with open(“hello.txt”, “w”) as f: 
      f.write(“Hello World”) 
      data = f.readlines() 

Splitting lines in a text file:
  with open(“fo.text”, “r”) as f:
    data = f.readlines()

    for line in data:
    words = line.split()
    print (words)


One bonus of using this method is that any files opened will be closed automatically after you are done. This leaves less to worry about during cleanup. 

File Positions
 tell() 
  method tells you the current position within the file; in other words, the next read or write will occur at that many bytes from the beginning of the file.

 seek(offset[, from]) 
  method changes the current file position. The offset argument indicates the number of bytes to be moved.

fo.seek(0, 0)
fo.read(10)

Renaming and Deleting Files
os.rename(current_file_name, new_file_name)
The remove() Method
os.remove("text2.txt")

DIR in python 
os.mkdir("newdir")
os.chdir("newdir")
os.getcwd()
os.rmdir('dirname')


Reading and Writing JSON to a File

Terminal EX:
>>> import json
>>> data = {'people':[{'name': 'Scott', 'website': 'stackabuse.com', 'from': 'Nebraska'}]}
>>> json.dumps(data, indent=4)


{
    "people": [
        {
            "website": "stackabuse.com", 
            "from": "Nebraska", 
            "name": "Scott"
        }
    ]
    
    loads
    
    with open('data.txt') as json_file:  
      data = json.load(json_file)
    
    lets look at this code:
    https://gist.github.com/billroy/3761495
    
    
    
Reading and Writing XML to a File

Terminal EX:
  from xml.dom import minidom

  # parse an xml file by name
  mydoc = minidom.parse('items.xml')

  items = mydoc.getElementsByTagName('item')

  # one specific item attribute
  print('Item #2 attribute:')  
  print(items[1].attributes['name'].value)

  # all item attributes
  print('\nAll attributes:')  
  for elem in items:  
      print(elem.attributes['name'].value)

  # one specific item's data
  print('\nItem #2 data:')  
  print(items[1].firstChild.data)  
  print(items[1].childNodes[0].data)

  # all items data
  print('\nAll item data:')  
  for elem in items:  
      print(elem.firstChild.data)

csv reader

import csv

with open('employee_birthday.txt') as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    line_count = 0
    for row in csv_reader:
        if line_count == 0:
            print(f'Column names are {", ".join(row)}')
            line_count += 1
        else:
            print(f'\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')
            line_count += 1
    print(f'Processed {line_count} lines.')


