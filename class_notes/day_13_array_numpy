Arrays
Numpy

Python Arrays:

When people talk about Python arrays, more often than not, they are talking about Python lists. 

Python Lists Vs Arrays
We can treat lists as arrays. However, we cannot constraint the type of elements stored in a list. 
For example:
a = [1, 3.5, "Hello"] 

arrays using array module
import array as arr
a = arr.array('d', [1, 3.5, "Hello"])   // Error	


How to create arrays?
-we need to import array module to create arrays. 
-we need to tell what type of data the array should contain.
For example:

import array as arr
a = arr.array('d', [1.1, 3.5, 4.5])
print(a)


Commonly used type codes:

We will use two type codes in this entire article: 'i' for integers and 'd' for floats.

'i'	signed int	int	
'd'	double	float	
'u'	Py_UNICODE	Unicode character	2

How to access array elements?
We use index to access elements of an array:

import array as arr
a = arr.array('i', [2, 4, 6, 8])

print("First element:", a[0])
print("Second element:", a[1])
print("Second last element:", a[-1])


How to slice arrays?
We can access a range of items in an array by using the slicing operator :.


import array as arr

numbers_list = [2, 5, 62, 5, 42, 52, 48, 5]
numbers_array = arr.array('i', numbers_list)

print(numbers_array[2:5]) # 3rd to 5th
print(numbers_array[:-5]) # beginning to 4th
print(numbers_array[5:])  # 6th to end
print(numbers_array[:])   # beginning to end


How to change or add elements?
Arrays are mutable; their elements can be changed in a similar way like lists.


import array as arr

numbers = arr.array('i', [1, 2, 3, 5, 7, 10])

# changing first element
numbers[0] = 0    
print(numbers)     # Output: array('i', [0, 2, 3, 5, 7, 10])

# changing 3rd to 5th element
numbers[2:5] = arr.array('i', [4, 6, 8])   
print(numbers)     # Output: array('i', [0, 2, 4, 6, 8, 10])


We can add one item to a list using append() method or add several items using extend() method.


import array as arr

numbers = arr.array('i', [1, 2, 3])

numbers.append(4)
print(numbers)     # Output: array('i', [1, 2, 3, 4])

# extend() appends iterable to the end of the array
numbers.extend([5, 6, 7]) 
print(numbers)     # Output: array('i', [1, 2, 3, 4, 5, 6, 7])


We can concatenate two arrays using + operator.


import array as arr

odd = arr.array('i', [1, 3, 5])
even = arr.array('i', [2, 4, 6])

numbers = arr.array('i')   # creating empty array of integer
numbers = odd + even

print(numbers)  



How to remove/delete elements?
We can delete one or more items from an array using del statement.


import array as arr

number = arr.array('i', [1, 2, 3, 3, 4])

del number[2] # removing third element
print(number) # Output: array('i', [1, 2, 3, 4])

del number # deleting entire array
print(number) # Error: array is not defined


We can use remove() method to remove the given item or pop() method to remove an item at the given index.

import array as arr
numbers = arr.array('i', [10, 11, 12, 12, 13])
numbers.remove(12)
print(numbers)   # Output: array('i', [10, 11, 12, 13])


What is NumPy?
NumPy is a general-purpose array-processing package. It provides a high-performance multidimensional array object, 
and tools for working with these arrays.

It is the fundamental package for scientific computing with Python. It contains various features including these important ones:

A powerful N-dimensional array object
Sophisticated (broadcasting) functions
Tools for integrating C/C++ and Fortran code
Useful linear algebra, Fourier transform, and random number capabilities

Besides its obvious scientific uses, NumPy can also be used as an efficient 
multi-dimensional container of generic data.
Arbitrary data-types can be defined using Numpy which allows NumPy to seamlessly 
and speedily integrate with a wide variety of databases.



print(numbers.pop(2))   # Output: 12


1. Arrays in NumPy: NumPy’s main object is the homogeneous multidimensional array.

It is a table of elements (usually numbers), all of the same type, indexed by a tuple of positive integers.
In NumPy dimensions are called axes. The number of axes is rank.
NumPy’s array class is called ndarray. It is also known by the alias array.
Example :

[[ 1, 2, 3],
 [ 4, 2, 5]]
Here,
rank = 2 (as it is 2-dimensional or it has 2 axes)
first dimension(axis) length = 2, second dimension has length = 3
overall shape can be expressed as: (2, 3)
# Python program to demonstrate  
# basic array characteristics 
import numpy as np 
  
# Creating array object 
arr = np.array( [[ 1, 2, 3], 
                 [ 4, 2, 5]] ) 
  
# Printing type of arr object 
print("Array is of type: ", type(arr)) 
  
# Printing array dimensions (axes) 
print("No. of dimensions: ", arr.ndim) 
  
# Printing shape of array 
print("Shape of array: ", arr.shape) 
  
# Printing size (total number of elements) of array 
print("Size of array: ", arr.size) 
  
# Printing type of elements in array 
print("Array stores elements of type: ", arr.dtype) 
print(numbers)   # Output: array('i', [10, 11, 13])
